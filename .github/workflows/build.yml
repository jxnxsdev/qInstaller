name: Beat Saber Mod Automation

on:
  schedule:
    # Runs every 12 hours
    - cron: "0 */12 * * *"
  workflow_dispatch:

jobs:
  mod-release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Node.js (optional, in case we need node)
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Configure Git
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "GitHub Actions Bot"

    - name: Fetch mods.json from external URL
      run: curl -o mods.json https://raw.githubusercontent.com/ComputerElite/ComputerElite.github.io/main/tools/Beat_Saber/mods.json

    - name: Parse mods.json and get version keys
      id: get_versions
      run: |
        versions=$(jq -r 'keys[]' mods.json | grep -v '^$') # Filter out any empty lines
        echo "Found versions: $versions"
        echo "$versions" | tr '\n' ' ' > versions.txt # Store versions in a text file
        echo "Versions list saved to versions.txt"
        echo "VERSION_LIST=$(<versions.txt)" >> $GITHUB_ENV


    - name: Set up GitHub authentication
      run: |
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

    - name: Set GH_TOKEN environment variable
      run: |
        echo "GH_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV

    - name: Check for existing releases and process new versions
      run: |
        # Get versions from the environment variable
        versions="${{ env.VERSION_LIST }}"
        
        # Initialize mod version counter
        mod_version="1.0.0"
        
        # Loop through all versions (split by space)
        for version in $versions; do
          version=$(echo $version | xargs) # Remove any leading/trailing whitespace
          echo "Processing version: $version"
    
          # Check if release exists for this version
          if gh release view "$version" >/dev/null 2>&1; then
            echo "Release already exists for version $version, skipping..."
            continue
          fi
    
          echo "Creating branch for version $version"
          # Create and checkout a new branch for the version
          git checkout -b "version-$version"
    
          # Copy mod.json and cover.png from the main branch
          git checkout main -- mod.json cover.png
    
          # Replace placeholders in mod.json with actual values
          sed -i "s/{package_version}/$version/g" mod.json
          sed -i "s/{mod_version}/$mod_version/g" mod.json
    
          # Commit changes to the branch
          git add mod.json
          git commit -m "Update mod.json for version $version"
    
          # Push the branch
          git push origin "version-$version"
    
          # Create a zip file (rename to .qmod)
          zip "$version.zip" mod.json cover.png
          mv "$version.zip" "$version.qmod"
    
          # Create a GitHub release with the .qmod file as an asset
          gh release create "$version" "$version.qmod" --title "Release $version" --notes "Automated release for version $version"
    
          # Increment mod version for next release
          mod_version=$(awk -F. -v OFS=. '{ $NF++; print }' <<< "$mod_version")
    
          # Checkout main branch again before processing the next version
          git checkout main
        done


    - name: Push changes
      run: |
        git push origin --all
